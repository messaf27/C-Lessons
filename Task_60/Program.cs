/*
Задача 60. ...Сформируйте трёхмерный массив из неповторяющихся двузначных чисел. 
Напишите программу, которая будет построчно выводить массив, добавляя индексы каждого элемента.
Массив размером 2 x 2 x 2
66(0,0,0) 25(0,1,0)
34(1,0,0) 41(1,1,0)
27(0,0,1) 90(0,1,1)
26(1,0,1) 55(1,1,1)
*/

int[,,] CreateUniqArray3D(int x, int y, int z, int rndMin, int rndMax)
{
    int[,,] arr = new int[x, y, z];
    int currentRndNum = 0;

    if ((rndMax - rndMin) < (x * y * z))
    {
        Console.WriteLine("Невозможно заполнить массив уникальными данными, поменяйте диапозон генерации!");
        Console.WriteLine($"Дапозон генерации: {(rndMax - rndMin)}, Размер массива: {(x * y * z)}");
    }
    else
    {
        for (int i = 0; i < arr.GetLength(0); i++)
        {
            for (int j = 0; j < arr.GetLength(1); j++)
            {
                for (int k = 0; k < arr.GetLength(2); k++)
                {
                    currentRndNum = new Random().Next(rndMin, rndMax + 1);

                    for (int m = 0; m < k + 1; m++)
                    {
                        if (arr[i, j, m] == currentRndNum)
                        {
                            currentRndNum = new Random().Next(rndMin, rndMax + 1);
                            Console.WriteLine("Совпадение!!!");
                        }
                    }

                    arr[i, j, k] = currentRndNum;
                }
            }
        }
    }

    return arr;
}

void PrintArray3D(int[,,] arr)
{
    for (int x = 0; x < arr.GetLength(0); x++)
    {
        for (int y = 0; y < arr.GetLength(1); y++)
        {
            for (int z = 0; z < arr.GetLength(2); z++)
            {
                Console.Write($"{arr[x, y, z]}->({x}, {y}, {z}) ");
            }
            Console.WriteLine();
        }
    }
}

Console.WriteLine("=========== Задача №60 ============= ");
int X, Y, Z, MinVal, MaxVal;

Console.Write("Введите размер массива по X: ");
X = Convert.ToInt32(Console.ReadLine()); 

Console.Write("Введите размер массива по Y: ");
Y = Convert.ToInt32(Console.ReadLine()); 

Console.Write("Введите размер массива по Z: ");
Z = Convert.ToInt32(Console.ReadLine()); 

Console.Write("Введите минимальное число: ");
MinVal = Convert.ToInt32(Console.ReadLine()); 

Console.Write("Введите максимальное число: ");
MaxVal = Convert.ToInt32(Console.ReadLine()); 

int[,,] array3d = CreateUniqArray3D(X, Y, Z, MinVal, MaxVal);
PrintArray3D(array3d);

/*
Terminal:

PS E:\PlatformioProject\CSharpLessons\Task_60> dotnet run
=========== Задача №60 ============= 
Невозможно заполнить массив уникальными данными, поменяйте диапозон генерации!
Дапозон генерации: 99, Размер массива: 125
0->(0, 0, 0) 0->(0, 0, 1) 0->(0, 0, 2) 0->(0, 0, 3) 0->(0, 0, 4)
0->(0, 1, 0) 0->(0, 1, 1) 0->(0, 1, 2) 0->(0, 1, 3) 0->(0, 1, 4)
0->(0, 2, 0) 0->(0, 2, 1) 0->(0, 2, 2) 0->(0, 2, 3) 0->(0, 2, 4)
0->(0, 3, 0) 0->(0, 3, 1) 0->(0, 3, 2) 0->(0, 3, 3) 0->(0, 3, 4)
0->(0, 4, 0) 0->(0, 4, 1) 0->(0, 4, 2) 0->(0, 4, 3) 0->(0, 4, 4)
0->(1, 1, 0) 0->(1, 1, 1) 0->(1, 1, 2) 0->(1, 1, 3) 0->(1, 1, 4)
0->(1, 2, 0) 0->(1, 2, 1) 0->(1, 2, 2) 0->(1, 2, 3) 0->(1, 2, 4)
0->(1, 3, 0) 0->(1, 3, 1) 0->(1, 3, 2) 0->(1, 3, 3) 0->(1, 3, 4)
0->(1, 4, 0) 0->(1, 4, 1) 0->(1, 4, 2) 0->(1, 4, 3) 0->(1, 4, 4)
0->(2, 0, 0) 0->(2, 0, 1) 0->(2, 0, 2) 0->(2, 0, 3) 0->(2, 0, 4)
0->(2, 1, 0) 0->(2, 1, 1) 0->(2, 1, 2) 0->(2, 1, 3) 0->(2, 1, 4)
0->(2, 2, 0) 0->(2, 2, 1) 0->(2, 2, 2) 0->(2, 2, 3) 0->(2, 2, 4)
0->(2, 3, 0) 0->(2, 3, 1) 0->(2, 3, 2) 0->(2, 3, 3) 0->(2, 3, 4)
0->(3, 0, 0) 0->(3, 0, 1) 0->(3, 0, 2) 0->(3, 0, 3) 0->(3, 0, 4)
0->(3, 1, 0) 0->(3, 1, 1) 0->(3, 1, 2) 0->(3, 1, 3) 0->(3, 1, 4)
0->(3, 2, 0) 0->(3, 2, 1) 0->(3, 2, 2) 0->(3, 2, 3) 0->(3, 2, 4)
0->(3, 3, 0) 0->(3, 3, 1) 0->(3, 3, 2) 0->(3, 3, 3) 0->(3, 3, 4)
0->(3, 4, 0) 0->(3, 4, 1) 0->(3, 4, 2) 0->(3, 4, 3) 0->(3, 4, 4)
0->(4, 0, 0) 0->(4, 0, 1) 0->(4, 0, 2) 0->(4, 0, 3) 0->(4, 0, 4)
0->(4, 1, 0) 0->(4, 1, 1) 0->(4, 1, 2) 0->(4, 1, 3) 0->(4, 1, 4)
0->(4, 2, 0) 0->(4, 2, 1) 0->(4, 2, 2) 0->(4, 2, 3) 0->(4, 2, 4)
0->(4, 3, 0) 0->(4, 3, 1) 0->(4, 3, 2) 0->(4, 3, 3) 0->(4, 3, 4)
0->(4, 4, 0) 0->(4, 4, 1) 0->(4, 4, 2) 0->(4, 4, 3) 0->(4, 4, 4)
PS E:\PlatformioProject\CSharpLessons\Task_60> dotnet run
E:\PlatformioProject\CSharpLessons\Task_60\Program.cs(68,1): error CS0103: Имя "x" не существует в текущем контексте. [E:\PlatformioProject\CSharpLessons\Task_60\Task_60.csproj]
E:\PlatformioProject\CSharpLessons\Task_60\Program.cs(71,1): error CS0103: Имя "y" не существует в текущем контексте. [E:\PlatformioProject\CSharpLessons\Task_60\Task_60.csproj]
E:\PlatformioProject\CSharpLessons\Task_60\Program.cs(74,1): error CS0103: Имя "z" не существует в текущем контексте. [E:\PlatformioProject\CSharpLessons\Task_60\Task_60.csproj]
E:\PlatformioProject\CSharpLessons\Task_60\Program.cs(82,37): error CS0165: Использование локальной переменной "X", которой не присвоено значение. [E:\PlatformioProject\CSharpLessons\Task_60\Task_60.csproj]
E:\PlatformioProject\CSharpLessons\Task_60\Program.cs(82,40): error CS0165: Использование локальной переменной "Y", которой не присвоено значение. [E:\PlatformioProject\CSharpLessons\Task_60\Task_60.csproj]
E:\PlatformioProject\CSharpLessons\Task_60\Program.cs(82,43): error CS0165: Использование локальной переменной "Z", которой не присвоено значение. [E:\PlatformioProject\CSharpLessons\Task_60\Task_60.csproj]

Ошибка сборки. Устраните ошибки сборки и повторите попытку.
PS E:\PlatformioProject\CSharpLessons\Task_60> dotnet run
=========== Задача №60 ============= 
Введите размер массива по X: 5
Введите размер массива по Y: 10
Введите размер массива по Z: 12
Введите минимальное число: 1
Введите максимальное число: 180
Невозможно заполнить массив уникальными данными, поменяйте диапозон генерации!
Дапозон генерации: 179, Размер массива: 600
0->(0, 0, 0) 0->(0, 0, 1) 0->(0, 0, 2) 0->(0, 0, 3) 0->(0, 0, 4) 0->(0, 0, 5) 0->(0, 0, 6) 0->(0, 0, 7) 0->(0, 0, 8) 0->(0, 0, 9) 0->(0, 0, 10) 0->(0, 0, 11)
0->(0, 1, 0) 0->(0, 1, 1) 0->(0, 1, 2) 0->(0, 1, 3) 0->(0, 1, 4) 0->(0, 1, 5) 0->(0, 1, 6) 0->(0, 1, 7) 0->(0, 1, 8) 0->(0, 1, 9) 0->(0, 1, 10) 0->(0, 1, 11)
0->(0, 2, 0) 0->(0, 2, 1) 0->(0, 2, 2) 0->(0, 2, 3) 0->(0, 2, 4) 0->(0, 2, 5) 0->(0, 2, 6) 0->(0, 2, 7) 0->(0, 2, 8) 0->(0, 2, 9) 0->(0, 2, 10) 0->(0, 2, 11)
0->(0, 3, 0) 0->(0, 3, 1) 0->(0, 3, 2) 0->(0, 3, 3) 0->(0, 3, 4) 0->(0, 3, 5) 0->(0, 3, 6) 0->(0, 3, 7) 0->(0, 3, 8) 0->(0, 3, 9) 0->(0, 3, 10) 0->(0, 3, 11)
0->(0, 4, 0) 0->(0, 4, 1) 0->(0, 4, 2) 0->(0, 4, 3) 0->(0, 4, 4) 0->(0, 4, 5) 0->(0, 4, 6) 0->(0, 4, 7) 0->(0, 4, 8) 0->(0, 4, 9) 0->(0, 4, 10) 0->(0, 4, 11) 
0->(0, 5, 0) 0->(0, 5, 1) 0->(0, 5, 2) 0->(0, 5, 3) 0->(0, 5, 4) 0->(0, 5, 5) 0->(0, 5, 6) 0->(0, 5, 7) 0->(0, 5, 8) 0->(0, 5, 9) 0->(0, 5, 10) 0->(0, 5, 11)
0->(0, 6, 0) 0->(0, 6, 1) 0->(0, 6, 2) 0->(0, 6, 3) 0->(0, 6, 4) 0->(0, 6, 5) 0->(0, 6, 6) 0->(0, 6, 7) 0->(0, 6, 8) 0->(0, 6, 9) 0->(0, 6, 10) 0->(0, 6, 11)
0->(0, 7, 0) 0->(0, 7, 1) 0->(0, 7, 2) 0->(0, 7, 3) 0->(0, 7, 4) 0->(0, 7, 5) 0->(0, 7, 6) 0->(0, 7, 7) 0->(0, 7, 8) 0->(0, 7, 9) 0->(0, 7, 10) 0->(0, 7, 11)
0->(0, 8, 0) 0->(0, 8, 1) 0->(0, 8, 2) 0->(0, 8, 3) 0->(0, 8, 4) 0->(0, 8, 5) 0->(0, 8, 6) 0->(0, 8, 7) 0->(0, 8, 8) 0->(0, 8, 9) 0->(0, 8, 10) 0->(0, 8, 11)
0->(0, 9, 0) 0->(0, 9, 1) 0->(0, 9, 2) 0->(0, 9, 3) 0->(0, 9, 4) 0->(0, 9, 5) 0->(0, 9, 6) 0->(0, 9, 7) 0->(0, 9, 8) 0->(0, 9, 9) 0->(0, 9, 10) 0->(0, 9, 11)
0->(1, 0, 0) 0->(1, 0, 1) 0->(1, 0, 2) 0->(1, 0, 3) 0->(1, 0, 4) 0->(1, 0, 5) 0->(1, 0, 6) 0->(1, 0, 7) 0->(1, 0, 8) 0->(1, 0, 9) 0->(1, 0, 10) 0->(1, 0, 11)
0->(1, 1, 0) 0->(1, 1, 1) 0->(1, 1, 2) 0->(1, 1, 3) 0->(1, 1, 4) 0->(1, 1, 5) 0->(1, 1, 6) 0->(1, 1, 7) 0->(1, 1, 8) 0->(1, 1, 9) 0->(1, 1, 10) 0->(1, 1, 11)
0->(1, 2, 0) 0->(1, 2, 1) 0->(1, 2, 2) 0->(1, 2, 3) 0->(1, 2, 4) 0->(1, 2, 5) 0->(1, 2, 6) 0->(1, 2, 7) 0->(1, 2, 8) 0->(1, 2, 9) 0->(1, 2, 10) 0->(1, 2, 11)
0->(1, 3, 0) 0->(1, 3, 1) 0->(1, 3, 2) 0->(1, 3, 3) 0->(1, 3, 4) 0->(1, 3, 5) 0->(1, 3, 6) 0->(1, 3, 7) 0->(1, 3, 8) 0->(1, 3, 9) 0->(1, 3, 10) 0->(1, 3, 11)
0->(1, 4, 0) 0->(1, 4, 1) 0->(1, 4, 2) 0->(1, 4, 3) 0->(1, 4, 4) 0->(1, 4, 5) 0->(1, 4, 6) 0->(1, 4, 7) 0->(1, 4, 8) 0->(1, 4, 9) 0->(1, 4, 10) 0->(1, 4, 11)
0->(1, 5, 0) 0->(1, 5, 1) 0->(1, 5, 2) 0->(1, 5, 3) 0->(1, 5, 4) 0->(1, 5, 5) 0->(1, 5, 6) 0->(1, 5, 7) 0->(1, 5, 8) 0->(1, 5, 9) 0->(1, 5, 10) 0->(1, 5, 11) 
0->(1, 6, 0) 0->(1, 6, 1) 0->(1, 6, 2) 0->(1, 6, 3) 0->(1, 6, 4) 0->(1, 6, 5) 0->(1, 6, 6) 0->(1, 6, 7) 0->(1, 6, 8) 0->(1, 6, 9) 0->(1, 6, 10) 0->(1, 6, 11)
0->(1, 7, 0) 0->(1, 7, 1) 0->(1, 7, 2) 0->(1, 7, 3) 0->(1, 7, 4) 0->(1, 7, 5) 0->(1, 7, 6) 0->(1, 7, 7) 0->(1, 7, 8) 0->(1, 7, 9) 0->(1, 7, 10) 0->(1, 7, 11)
0->(1, 8, 0) 0->(1, 8, 1) 0->(1, 8, 2) 0->(1, 8, 3) 0->(1, 8, 4) 0->(1, 8, 5) 0->(1, 8, 6) 0->(1, 8, 7) 0->(1, 8, 8) 0->(1, 8, 9) 0->(1, 8, 10) 0->(1, 8, 11)
0->(1, 9, 0) 0->(1, 9, 1) 0->(1, 9, 2) 0->(1, 9, 3) 0->(1, 9, 4) 0->(1, 9, 5) 0->(1, 9, 6) 0->(1, 9, 7) 0->(1, 9, 8) 0->(1, 9, 9) 0->(1, 9, 10) 0->(1, 9, 11)
0->(2, 0, 0) 0->(2, 0, 1) 0->(2, 0, 2) 0->(2, 0, 3) 0->(2, 0, 4) 0->(2, 0, 5) 0->(2, 0, 6) 0->(2, 0, 7) 0->(2, 0, 8) 0->(2, 0, 9) 0->(2, 0, 10) 0->(2, 0, 11)
0->(2, 1, 0) 0->(2, 1, 1) 0->(2, 1, 2) 0->(2, 1, 3) 0->(2, 1, 4) 0->(2, 1, 5) 0->(2, 1, 6) 0->(2, 1, 7) 0->(2, 1, 8) 0->(2, 1, 9) 0->(2, 1, 10) 0->(2, 1, 11)
0->(2, 2, 0) 0->(2, 2, 1) 0->(2, 2, 2) 0->(2, 2, 3) 0->(2, 2, 4) 0->(2, 2, 5) 0->(2, 2, 6) 0->(2, 2, 7) 0->(2, 2, 8) 0->(2, 2, 9) 0->(2, 2, 10) 0->(2, 2, 11)
0->(2, 3, 0) 0->(2, 3, 1) 0->(2, 3, 2) 0->(2, 3, 3) 0->(2, 3, 4) 0->(2, 3, 5) 0->(2, 3, 6) 0->(2, 3, 7) 0->(2, 3, 8) 0->(2, 3, 9) 0->(2, 3, 10) 0->(2, 3, 11)
0->(2, 4, 0) 0->(2, 4, 1) 0->(2, 4, 2) 0->(2, 4, 3) 0->(2, 4, 4) 0->(2, 4, 5) 0->(2, 4, 6) 0->(2, 4, 7) 0->(2, 4, 8) 0->(2, 4, 9) 0->(2, 4, 10) 0->(2, 4, 11)
0->(2, 5, 0) 0->(2, 5, 1) 0->(2, 5, 2) 0->(2, 5, 3) 0->(2, 5, 4) 0->(2, 5, 5) 0->(2, 5, 6) 0->(2, 5, 7) 0->(2, 5, 8) 0->(2, 5, 9) 0->(2, 5, 10) 0->(2, 5, 11)
0->(2, 6, 0) 0->(2, 6, 1) 0->(2, 6, 2) 0->(2, 6, 3) 0->(2, 6, 4) 0->(2, 6, 5) 0->(2, 6, 6) 0->(2, 6, 7) 0->(2, 6, 8) 0->(2, 6, 9) 0->(2, 6, 10) 0->(2, 6, 11)
0->(2, 7, 0) 0->(2, 7, 1) 0->(2, 7, 2) 0->(2, 7, 3) 0->(2, 7, 4) 0->(2, 7, 5) 0->(2, 7, 6) 0->(2, 7, 7) 0->(2, 7, 8) 0->(2, 7, 9) 0->(2, 7, 10) 0->(2, 7, 11)
0->(2, 8, 0) 0->(2, 8, 1) 0->(2, 8, 2) 0->(2, 8, 3) 0->(2, 8, 4) 0->(2, 8, 5) 0->(2, 8, 6) 0->(2, 8, 7) 0->(2, 8, 8) 0->(2, 8, 9) 0->(2, 8, 10) 0->(2, 8, 11) 
0->(2, 9, 0) 0->(2, 9, 1) 0->(2, 9, 2) 0->(2, 9, 3) 0->(2, 9, 4) 0->(2, 9, 5) 0->(2, 9, 6) 0->(2, 9, 7) 0->(2, 9, 8) 0->(2, 9, 9) 0->(2, 9, 10) 0->(2, 9, 11)
0->(3, 1, 0) 0->(3, 1, 1) 0->(3, 1, 2) 0->(3, 1, 3) 0->(3, 1, 4) 0->(3, 1, 5) 0->(3, 1, 6) 0->(3, 1, 7) 0->(3, 1, 8) 0->(3, 1, 9) 0->(3, 1, 10) 0->(3, 1, 11)
0->(3, 2, 0) 0->(3, 2, 1) 0->(3, 2, 2) 0->(3, 2, 3) 0->(3, 2, 4) 0->(3, 2, 5) 0->(3, 2, 6) 0->(3, 2, 7) 0->(3, 2, 8) 0->(3, 2, 9) 0->(3, 2, 10) 0->(3, 2, 11)
0->(3, 3, 0) 0->(3, 3, 1) 0->(3, 3, 2) 0->(3, 3, 3) 0->(3, 3, 4) 0->(3, 3, 5) 0->(3, 3, 6) 0->(3, 3, 7) 0->(3, 3, 8) 0->(3, 3, 9) 0->(3, 3, 10) 0->(3, 3, 11)
0->(3, 4, 0) 0->(3, 4, 1) 0->(3, 4, 2) 0->(3, 4, 3) 0->(3, 4, 4) 0->(3, 4, 5) 0->(3, 4, 6) 0->(3, 4, 7) 0->(3, 4, 8) 0->(3, 4, 9) 0->(3, 4, 10) 0->(3, 4, 11)
0->(3, 5, 0) 0->(3, 5, 1) 0->(3, 5, 2) 0->(3, 5, 3) 0->(3, 5, 4) 0->(3, 5, 5) 0->(3, 5, 6) 0->(3, 5, 7) 0->(3, 5, 8) 0->(3, 5, 9) 0->(3, 5, 10) 0->(3, 5, 11)
0->(3, 6, 0) 0->(3, 6, 1) 0->(3, 6, 2) 0->(3, 6, 3) 0->(3, 6, 4) 0->(3, 6, 5) 0->(3, 6, 6) 0->(3, 6, 7) 0->(3, 6, 8) 0->(3, 6, 9) 0->(3, 6, 10) 0->(3, 6, 11)
0->(3, 7, 0) 0->(3, 7, 1) 0->(3, 7, 2) 0->(3, 7, 3) 0->(3, 7, 4) 0->(3, 7, 5) 0->(3, 7, 6) 0->(3, 7, 7) 0->(3, 7, 8) 0->(3, 7, 9) 0->(3, 7, 10) 0->(3, 7, 11)
0->(3, 8, 0) 0->(3, 8, 1) 0->(3, 8, 2) 0->(3, 8, 3) 0->(3, 8, 4) 0->(3, 8, 5) 0->(3, 8, 6) 0->(3, 8, 7) 0->(3, 8, 8) 0->(3, 8, 9) 0->(3, 8, 10) 0->(3, 8, 11)
0->(3, 9, 0) 0->(3, 9, 1) 0->(3, 9, 2) 0->(3, 9, 3) 0->(3, 9, 4) 0->(3, 9, 5) 0->(3, 9, 6) 0->(3, 9, 7) 0->(3, 9, 8) 0->(3, 9, 9) 0->(3, 9, 10) 0->(3, 9, 11)
0->(4, 0, 0) 0->(4, 0, 1) 0->(4, 0, 2) 0->(4, 0, 3) 0->(4, 0, 4) 0->(4, 0, 5) 0->(4, 0, 6) 0->(4, 0, 7) 0->(4, 0, 8) 0->(4, 0, 9) 0->(4, 0, 10) 0->(4, 0, 11)
0->(4, 1, 0) 0->(4, 1, 1) 0->(4, 1, 2) 0->(4, 1, 3) 0->(4, 1, 4) 0->(4, 1, 5) 0->(4, 1, 6) 0->(4, 1, 7) 0->(4, 1, 8) 0->(4, 1, 9) 0->(4, 1, 10) 0->(4, 1, 11)
0->(4, 2, 0) 0->(4, 2, 1) 0->(4, 2, 2) 0->(4, 2, 3) 0->(4, 2, 4) 0->(4, 2, 5) 0->(4, 2, 6) 0->(4, 2, 7) 0->(4, 2, 8) 0->(4, 2, 9) 0->(4, 2, 10) 0->(4, 2, 11)
0->(4, 3, 0) 0->(4, 3, 1) 0->(4, 3, 2) 0->(4, 3, 3) 0->(4, 3, 4) 0->(4, 3, 5) 0->(4, 3, 6) 0->(4, 3, 7) 0->(4, 3, 8) 0->(4, 3, 9) 0->(4, 3, 10) 0->(4, 3, 11)
0->(4, 4, 0) 0->(4, 4, 1) 0->(4, 4, 2) 0->(4, 4, 3) 0->(4, 4, 4) 0->(4, 4, 5) 0->(4, 4, 6) 0->(4, 4, 7) 0->(4, 4, 8) 0->(4, 4, 9) 0->(4, 4, 10) 0->(4, 4, 11)
0->(4, 5, 0) 0->(4, 5, 1) 0->(4, 5, 2) 0->(4, 5, 3) 0->(4, 5, 4) 0->(4, 5, 5) 0->(4, 5, 6) 0->(4, 5, 7) 0->(4, 5, 8) 0->(4, 5, 9) 0->(4, 5, 10) 0->(4, 5, 11)
0->(4, 6, 0) 0->(4, 6, 1) 0->(4, 6, 2) 0->(4, 6, 3) 0->(4, 6, 4) 0->(4, 6, 5) 0->(4, 6, 6) 0->(4, 6, 7) 0->(4, 6, 8) 0->(4, 6, 9) 0->(4, 6, 10) 0->(4, 6, 11)
0->(4, 7, 0) 0->(4, 7, 1) 0->(4, 7, 2) 0->(4, 7, 3) 0->(4, 7, 4) 0->(4, 7, 5) 0->(4, 7, 6) 0->(4, 7, 7) 0->(4, 7, 8) 0->(4, 7, 9) 0->(4, 7, 10) 0->(4, 7, 11)
0->(4, 8, 0) 0->(4, 8, 1) 0->(4, 8, 2) 0->(4, 8, 3) 0->(4, 8, 4) 0->(4, 8, 5) 0->(4, 8, 6) 0->(4, 8, 7) 0->(4, 8, 8) 0->(4, 8, 9) 0->(4, 8, 10) 0->(4, 8, 11)
0->(4, 9, 0) 0->(4, 9, 1) 0->(4, 9, 2) 0->(4, 9, 3) 0->(4, 9, 4) 0->(4, 9, 5) 0->(4, 9, 6) 0->(4, 9, 7) 0->(4, 9, 8) 0->(4, 9, 9) 0->(4, 9, 10) 0->(4, 9, 11)
PS E:\PlatformioProject\CSharpLessons\Task_60> dotnet run
=========== Задача №60 ============= 
Введите размер массива по X: 2
Введите размер массива по Y: 2
Введите размер массива по Z: 2
Введите минимальное число: 1
Введите максимальное число: 50
46->(0, 0, 0) 42->(0, 0, 1) 
49->(0, 1, 0) 17->(0, 1, 1)
32->(1, 0, 0) 19->(1, 0, 1)
1->(1, 1, 0) 27->(1, 1, 1)
PS E:\PlatformioProject\CSharpLessons\Task_60> 
*/